<template>
  <view>
    <view>
      <view class="gaussian">
        <view>
          <view class="back">
            <view @tap="toSearch">返回</view>
        </view>
        <view class="book">
          <image class="cover" src="{{apiHost + detail.cover}}" alt=""></image>
          <view class="info">
            <view class="h1">{{detail.title}}</view>
            <view class="p">{{detail.author}}</view>
            <view class="p">{{detail.majorCate}} / {{detail.minorCate}}</view>
            <view class="p meta">{{detail.wordCount}}字、{{detail.latelyFollower}}人在追</view>
            <view class="p">{{detail.isSerial ? '连载中' : '已完结'}}</view>
          </view>
        </view>
      </view>
        <view style="background-image: url({{gaussianCover}});animation: run 25s ease-in-out;background-size: 100% 100%;" class="bg"> </view>
      </view>
      <!--
      没法动态改变子组件的值，很奇怪，因此注视了
      <gaussianblur :src.sync="gaussianCover">
        <view>
          <view class="back">
            <view @tap="toSearch">返回</view>
          </view>
          <view class="book">
            <image class="cover" src="{{apiHost + detail.cover}}" alt=""></image>
            <view class="info">
              <view class="h1">{{detail.title}}</view>
              <view class="p">{{detail.author}}</view>
              <view class="p">{{detail.majorCate}} / {{detail.minorCate}}</view>
              <view class="p meta">{{detail.wordCount}}字、{{detail.latelyFollower}} 人在追</view>
              <view class="p">{{isSerial}}</view>
            </view>
          </view>
        </view>
      </gaussianblur>
      -->
      <view class="body">
        <view class="p" class="desc">{{detail.longIntro}}</view>
        <view class="tags">
          <repeat for="{{detail.tags}}" item="item">
            <view class="span">
              {{item}}
            </view>
          </repeat>
        </view>
        <view class="last">最新章节：{{detail.lastChapter}}</view>
        <a class="read" data-id="{{detail._id}}" @tap="getReader">立即阅读</a>
        <a class="download" data-id="{{detail._id}}" style="display: none" @tap="downLoad">{{detail.downloadStatus ? '离线下载' : '已下载'}}</a>
      </view>
      <view wx:if="{{detail.downloadPercent > 1}}" class="progressWrap">
        <view class="progressBody">
          <view class="progress" style="width:50px" > </view>
        </view>
      </view>
    </view>
  </view>
</template>
<style lang="less">
@import "../styles/detail.less";
</style>
<script>
  import wepy from 'wepy'
  import GaussianBlur from '../components/gaussianblur'
  import { getDetail, getSource, getChapterList, getChapter } from '../utils/api'
  import { getStorage, setStorage } from '../utils/storage'
  import { API_HOST, STORAGE_READER, STORAGE_STORE, INIT_READER_STATE } from '../utils/constant'
  import tip from '../utils/tip'
  import {changeBook2Store} from '../utils/functions'
  export default class Detail extends wepy.page {
    config = {
      navigationBarTitleText: 'MyReader'
    }

    components = {
      gaussianblur: GaussianBlur
    }
    data = {
      gaussianCover: '',
      apiHost: API_HOST,
      detail: {
        animation: false,
        cover: '',
        lastChapter: '',
        title: '',
        author: '',
        majorCate: '',
        minorCate: '',
        wordCount: '',
        latelyFollower: '',
        longIntro: '',
        tags: [],
        isSerial: false, // isSerial ? '连载中' : '已完结'
        downloadStatus: false// !downloadStatus ? '离线下载' : '已下载'
      }
    }
    methods = {
      toSearch: function() {
        wepy.navigateBack({
          delta: 1
        })
      },
      getReader: function(e) {
        var _id = e.currentTarget.dataset.id
        // 根据书籍id获取书源
        this.getSourceData(_id)
      },
      downLoad: function(e) {
        var _id = e.currentTarget.dataset.id
        wepy.navigateTo({
          url: '/pages/reader?id=' + _id
        })
      }
    }
    toReaderPage(id) {
      wepy.navigateTo({
        url: '/pages/reader?id=' + id
      })
    }
    /**
     * 获取书源
     * @param query
     */
    async getSourceData(_id) {
      try {
        const id = _id
        console.log('id', id)
        // 这里获得整个缓存中的store，并对应上reader的store。其reader的store结构参考store/reducer/reader.js initState
        const readerStorage = await getStorage(STORAGE_READER)
        const currentId = readerStorage && readerStorage.id
        if (currentId) {
          if (id === currentId) {
            // 阅读
            this.toReaderPage(currentId)
            return
          }
        }
        const getDetailJson = await getDetail({
          query: {
            id: id
          },
          loading: true
        })
        const detail = getDetailJson.data
        console.log('@@getdetail', detail)
        const getSourceJson = await getSource({
          query: {
            id: id
          },
          loading: true
        })
        const source = getSourceJson.data
        console.log(`从网络获取《${detail.title}》`)
        console.log('###save', { source: source, id: id, detail: detail })
        // 新书籍
        var newBook = INIT_READER_STATE
        newBook.source = source
        newBook.id = id
        newBook.detail = detail
        setStorage(STORAGE_STORE, {[id]: newBook}) // 先将新书籍放到书架中
        // 交换书籍
        changeBook2Store(id)
        setStorage(STORAGE_READER, newBook)
        await this.getChapterListData()
        tip.loaded()
        // 阅读
        this.toReaderPage(id)
      } catch (error) {
        console.log(error)
        tip.loaded()
        tip.alert('好像哪里出错了')
      }
    }

    /**
     * 获取下一个书源。
     * 在获取书源后无法获取 具体章节 便会获取下一个书源。直到所有书源换完为止
     */
    async getNextSource() {
      try {
        const readerStorage = await getStorage(STORAGE_READER)
        const { source, currentSource } = readerStorage
        let nextSource = (currentSource || 1) + 1
        console.log(`开始第${nextSource}个书源`)
        if (nextSource >= source.length) {
          console.log('没有可用书源,切换回优质书源')
          nextSource = 0
        }
        await setStorage(STORAGE_READER, {currentSource: nextSource})
        await this.getChapterListData()
      } catch (error) {
        console.log(error)
      }
    }
    /**
     * 章节列表
     */
    async getChapterListData() {
      try {
        let { source, currentSource, id } = await getStorage(STORAGE_READER)
        // console.log('获取章节列表', currentSource, source.length, JSON.stringify(source))
        if (currentSource >= source.length) {
          console.log('走到这里说明所有书源都已经切换完了')
          await setStorage(STORAGE_READER, {currentSource: 0})
          setStorage(STORAGE_STORE, {[id]: getStorage(STORAGE_READER)})
          await this.getChapterListData()
          return
        }
        let sourceData = source[currentSource || 0]
        const _id = sourceData._id
        const name = sourceData.name || '未知来源'
        console.log(`书源: ${name}`)
        const chapterListData = await getChapterList({
          query: {
            id: _id
          },
          loading: true
        })
        const chapters = chapterListData.data
        console.log('request chapters', chapterListData)
        setStorage(STORAGE_READER, {chapters: chapters.chapters})
        // setStorage(STORAGE_STORE, {[id]: getStorage(STORAGE_READER)})
        await this.getChapterData()
      } catch (error) {
        console.log(error)
      }
    }
    /**
     * 获取章节内容
     */
    async getChapterData() {
      try {
        let { chapters, currentChapter, downloadStatus, chaptersContent, id } = await getStorage(STORAGE_READER)
        currentChapter = currentChapter > chapters.length ? 0 : currentChapter
        if (downloadStatus) { // 已下载直接从本地获取
          const chapter = chaptersContent[currentChapter || 0]
          console.log(`已下载直接从本地获取,章节: ${chapter.title}`)
          setStorage(STORAGE_READER, {chapters: chapters, currentChapter: currentChapter})
          // setStorage(STORAGE_STORE, {[id]: getStorage(STORAGE_READER)})
          wx.pageScrollTo({
            scrollTop: 0,
            duration: 300
          })
        } else {
          console.log('chapters link', chapters)
          const { link } = chapters[0]
          const chapterData = await getChapter({
            query: {
              link: link
            },
            loading: true
          })
          const chapter = chapterData.data.chapter
          console.log('chapter 章节', chapter)
          if (chapter) {
            setStorage(STORAGE_READER, {chapter: chapter, currentChapter: currentChapter})
            // setStorage(STORAGE_STORE, {[id]: getStorage(STORAGE_READER)})
            wx.pageScrollTo({
              scrollTop: 0,
              duration: 300
            })
          } else {
            console.log('章节获取失败')
            await this.getNextSource()
          }
        }
      } catch (error) {
        console.log(error)
      }
    }
    /**
     * 获取书籍详细内容
     */
    async loadDetail(option) {
      var that = this
      const res = await getDetail({
        query: {
          id: option.id
        }
      })
      res.data.wordCount = res.data.wordCount > 10000 ? parseInt(res.data.wordCount / 10000) + '万' : res.data.wordCount
      res.data.latelyFollower = res.data.latelyFollower > 10000 ? parseInt(res.data.latelyFollower / 10000) + '万' : res.data.latelyFollower
      var newDetail = Object.assign(that.detail, res.data)
      that.setData({
        detail: newDetail,
        gaussianCover: API_HOST + newDetail.cover
      })
      that.detail = newDetail
      that.gaussianCover = API_HOST + newDetail.cover
    }

    onLoad(option) {
      // 防治reader中缺少字段
      setStorage(STORAGE_READER, Object.assign(INIT_READER_STATE, getStorage(STORAGE_READER) || {}))
//      option.id = '53c0999b4d33ab2a290bac56'
      this.loadDetail(option)
    }
  }
</script>
